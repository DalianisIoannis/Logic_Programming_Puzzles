
[0, -1, -1, 3, -1]
RowTents είναι μία λίστα με τα επιθυμητά συνολικά μέγιστα πλήθη τεντών ανά
γραμμή,

[1, 1, -1, -1, 1]
ColumnTents είναι μία λίστα με τα επιθυμητά συνολικά μέγιστα πλήθη τεντών
ανά στήλη

[1-2, 2-5, 3-3, 5-1, 5-5]
Trees είναι μία λίστα από συντεταγμένες της μορφής Row-Column, στις
οποίες βρίσκονται τα δέντρα. 

πλήθος γραμμών 𝑁 = μήκος λίστας RowTents
πλήθος στηλών 𝑀 = μήκος λίστας ColumnTents
πλήθος δέντρων 𝐾 = μήκος λίστας Trees

tents(  [0, -1, -1, 3, -1],
        [1, 1, -1, -1, 1],
        [1-2, 2-5, 3-3, 5-1, 5-5],
        Tents).
tents(  [0, -1, -1, 3, -1], [1, 1, -1, -1, 1], [1-2, 2-5, 3-3, 5-1, 5-5], Tents).
findall(Tents, tents([0, -1, -1, 3, -1], [1, 1, -1, -1, 1], [1-2, 2-5, 3-3, 5-1, 5-5], Tents), AllTents), length(AllTents, N).

tents([-1, -1, -1, 2, -1, -1, 2, 1], [2, 1, -1, 1, 1, -1, 1, -1, -1, 1, 2, -1], [1-4, 1-9, 1-12, 2-1, 2-5, 2-8, 3-1, 3-6, 3-8, 3-12, 4-5, 4-7, 4-11, 5-3, 5-9, 6-1, 6-7, 6-11, 7-5, 8-10], Tents).
findall(Tents, tents([-1, -1, -1, 2, -1, -1, 2, 1], [2, 1, -1, 1, 1, -1, 1, -1, -1, 1, 2, -1], [1-4, 1-9, 1-12, 2-1, 2-5, 2-8, 3-1, 3-6, 3-8, 3-12, 4-5, 4-7, 4-11, 5-3, 5-9, 6-1, 6-7, 6-11, 7-5, 8-10], Tents), AllTents), length(AllTents, N).

findall(Tents, tents([1, -1, -1, -1, -1, -1, 3, 1, -1, 1, 2, 2, 1], [2, 1, -1, 1, 4, 1, 3, -1, 2, 1, 1, 0], [2-3, 1-5, 5-4, 4-5, 7-7, 10-6, 2-2, 4-8, 8-5, 9-9, 1-8, 9-2, 3-3, 1-1, 9-8, 8-7, 10-10, 2-7, 8-6, 4-4, 9-1], Tents), AllTents), length(AllTents, N).

findall(Tents, tents([1, -1, -1, -1, -1, -1, 3, 1, -1, 1, 2, 2, -1], [2, 1, -1, 1, 4, -1, 3, -1, 2, 1, 1, -1], [2-3, 1-5, 5-4, 4-5, 7-7, 10-6, 2-2, 4-8, 8-5, 9-9, 1-8, 9-2, 3-3, 1-1, 9-8, 8-7, 10-10, 2-7, 8-6, 4-4, 9-1, 11-4, 11-8, 12-5, 12-9, 12-12, 6-11, 9-11, 6-12], Tents), AllTents), length(AllTents, N).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
go_all :-
    member(Method, [input_order, max_regret, first_fail, most_constrained, smallest, largest, occurrence]),
    member(ChooseVar, [indomain, indomain_median, indomain_min, indomain_middle, indomain_split]),
    member(Strat, [restart, continue]),
    nl, write('--------------------------------'), nl,
    write('Method: '), write(Method),
    write('  ChooseVar: '), write(ChooseVar),
    write('  Strat: '), write(Strat), nl,
    write('--------------------------------'), nl,
    go_all(Method, ChooseVar, Strat),
    fail.

go_all(Method, ChooseVar, Strat) :-
    cputime(T1),
    findall(Tents, tentsPARS([1, -1, -1, -1, -1, -1, 3, 1, -1, 1, 2, 2, 1],
                            [2, 1, -1, 1, 4, 1, 3, -1, 2, 1, 1, 0], 
                            [2-3, 1-5, 5-4, 4-5, 7-7, 10-6, 2-2, 4-8, 8-5, 9-9, 1-8, 9-2, 3-3, 1-1, 9-8, 8-7, 10-10, 2-7, 8-6, 4-4, 9-1], Tents, Method, ChooseVar, Strat), 
            AllTents), length(AllTents, N),
    %findall(Tents, tentsPARS([0, -1, -1, 3, -1], [1, 1, -1, -1, 1], [1-2, 2-5, 3-3, 5-1, 5-5], Tents, Method, ChooseVar, Strat), AllTents), length(AllTents, N),
    %findall(Tents, tentsPARS([-1, -1, -1, 2, -1, -1, 2, 1], [2, 1, -1, 1, 1, -1, 1, -1, -1, 1, 2, -1], [1-4, 1-9, 1-12, 2-1, 2-5, 2-8, 3-1, 3-6, 3-8, 3-12, 4-5, 4-7, 4-11, 5-3, 5-9, 6-1, 6-7, 6-11, 7-5, 8-10], Tents, Method, ChooseVar, Strat), AllTents), length(AllTents, N),
    cputime(T2), T is T2-T1,
    write('AllTents is '), write(' with length '), write(N), writeln('.'),
    write('Time: '), write(T), writeln(' secs.').


tentsPARS(RowTents, ColumnTents, Trees, Tents, Method, ChooseVar, Strat) :-
    length(RowTents, N),
    length(ColumnTents, M),
    initPositions(0, N, M, Positions),
    Positions#::[0,1],
    constrains(Positions, RowTents, ColumnTents, Trees),
    returnListWithAllPos(Positions, ListPos),
    Cost #= sum(ListPos),
    bb_min(
        search(Positions, 0, Method, ChooseVar, complete, []),
        Cost, bb_options{strategy:Strat, solutions:all}
    ),
    returnCorList(Positions, 0, Tents).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

FOR FIRST TRY

I - J = 3 - 4
ElsToBypass is (I-1) * M = 2 * 5 = 10

retListBypass(
    [   1,  2,  3,  4,  5,
        6,  7,  8,  9,  10,
        11, 12, 13, 14, 15,
        16, 17, 18, 19, 20,
        21, 22, 23, 24, 25
    ],
    0, 10, PositionsBP
)
retListBypass(
    [   1,  2,  3,  4,  5,
        6,  7,  8,  9,  10,
        11, 12, 13, 14, 15,
        16, 17, 18, 19, 20,
        21, 22, 23, 24, 25
    ],
    0, 40, PositionsBP
)

PositionsBP = [ 11, 12, 13, 14, 15,
                16, 17, 18, 19, 20,
                21, 22, 23, 24, 25]

getElement(
    [   1,  2,  3,  4,  5,
        6,  7,  8,  9,  10,
        11, 12, 13, 14, 15,
        16, 17, 18, 19, 20,
        21, 22, 23, 24, 25
    ],
    5, 5, 3, 4, El
)